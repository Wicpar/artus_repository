"""
repo.registerModule("artus.base");

// create a base context to catch non matched elements and report in the log without crashing
var error = repo.getMatcher("error") ?: repo.registerMatcher("error", ".");
var recoverableCtx = repo.registerContextType("artus.recoverable", null, [error], {error.type: "log('severe', `expected: ${type.matcherStackString()}; got: ${token.text}`)"})

// extend that context to ignore spaces, since we are not writing python. Don't forget unicode.
var space = repo.registerMatcher("artus.base.space", "[\p{Z}\r]+|\n");
var spaceableCtx = repo.registerContextType("spaceable", null, [space], {space.type: doNothing}, recoverableCtx);

// extend that context to ignore spaces, since we are not writing python. Don't forget unicode.
var lineComment = repo.registerMatcher("artus.base.comment.line", "//.*?\n");
var blockComment = repo.registerMatcher("artus.base.comment.block", "/\*.*?\*/");
var commentableCtx = repo.registerContextType("artus.commentable", null, [blockComment, lineComment], {blockComment.type: doNothing, lineComment.type: doNothing}, spaceableCtx);

// create the main hook, to allow extension
var mainCtx = repo.preRegisterContextType("artus.main", commentableCtx);

//register common tokens
var name = repo.getMatcher("artus.name") ?: repo.registerMatcher("artus.name", "[\p{Pc}\p{L}\p{M}\p{No}][\p{Pc}\p{L}\p{M}\p{N}]*");

repo.registerLinearFactory(10000, [clazz('java.lang.String')]); // allow namespace declaration with contextualized strings, with low priority
repo.registerProceduralFactory(1000); // allow procedural scope declaration with high priority
repo.registerMappedFactory(1000000000); // mapping with lowest priority

"""